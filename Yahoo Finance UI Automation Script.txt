import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert; // Use TestNG for assertions
import org.testng.annotations.Test; // Use TestNG annotations

import java.time.Duration;

public class YahooFinanceTest {

    @Test(dataProvider = "symbolProvider") // TestNG data provider
    public void testYahooFinance(String symbol, String expectedSuggestion) {
        System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver"); // Update ChromeDriver path
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();

        try {
            driver.get("https://finance.yahoo.com/");

            WebElement searchBox = driver.findElement(By.id("ybar-sbq")); // More robust selector if possible
            searchBox.sendKeys(symbol);

            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

            try {
                WebElement firstSuggestion = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//li[@data-reactid='34']"))); // Update XPath
                String actualSuggestion = firstSuggestion.getText();
                Assert.assertEquals(actualSuggestion, expectedSuggestion, "Autosuggestion mismatch"); // TestNG assertion
                firstSuggestion.click();
            } catch (TimeoutException e) {
                System.err.println("Autosuggestion not found for symbol: " + symbol);
                searchBox.sendKeys(Keys.ENTER); // Try pressing Enter if no autosuggestion.
                if (expectedSuggestion != null) { // If expectedSuggestion is not null, the test should fail
                    Assert.fail("Autosuggestion not found for symbol: " + symbol);
                }
            }

            try {
                // ... (rest of the code for price verification and data capture, same as before)

                wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//fin-streamer[@data-symbol='" + symbol + "']/span[@data-reactid='50']")));
                WebElement priceElement = driver.findElement(By.xpath("//fin-streamer[@data-symbol='" + symbol + "']/span[@data-reactid='50']"));
                String priceString = priceElement.getText().replace(",", "");
                double currentPrice = Double.parseDouble(priceString);

                System.out.println("Current Price for " + symbol + ": $" + currentPrice);

                if (currentPrice > 200) {
                    System.out.println("Stock price verified: $" + currentPrice);
                } else {
                    System.out.println("Stock price is not greater than $200. Current price: $" + currentPrice);
                }

            } catch (NoSuchElementException | TimeoutException | NumberFormatException e) {
                System.err.println("Error getting stock price for " + symbol + ": " + e.getMessage());
            }

            try {
                WebElement previousCloseElement = driver.findElement(By.xpath("//td[@data-reactid='147']"));
                String previousClose = previousCloseElement.getText();

                WebElement volumeElement = driver.findElement(By.xpath("//td[@data-reactid='152']"));
                String volume = volumeElement.getText();

                System.out.println("Previous Close for " + symbol + ": " + previousClose);
                System.out.println("Volume for " + symbol + ": " + volume);

            } catch (NoSuchElementException e) {
                System.err.println("Error getting additional data for " + symbol + ": " + e.getMessage());
            }

        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace();
            Assert.fail("An unexpected error occurred: " + e.getMessage()); // Fail the test
        } finally {
            driver.quit();
        }
    }


    @org.testng.annotations.DataProvider(name = "symbolProvider")
    public Object[][] symbolProvider() {
        return new Object[][]{
                {"TSLA", "TESLA Inc."},       // Valid symbol
                {"AAPL", "Apple Inc."},       // Another valid symbol
                {"INVALID_SYMBOL", null}, // Invalid symbol - no autosuggestion expected
                {"", null} // Empty symbol - no autosuggestion expected
        };
    }
}